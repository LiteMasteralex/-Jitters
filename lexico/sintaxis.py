# -*- coding: utf-8 -*-
"""Sintaxis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N2JVLUzouD2x1pFRuZWeCADg1urK5Brb
"""

import pyparsing
from pyparsing import *
from pydoc import locate

# Esructura de Tabla de Variables
TablaVariables = {}
TablaFunciones = {}

# Auxiliares para definicion de Tablas
tipo = 'void'
dimension = 0
nombreFuncion = ''

# Funcion Para Agregar a Tabla de Variables
def AgregarVariable(nombre):
  TablaVariables[nombre[0]] = {
      'tipo': tipo,
      'dimension' : dimension
  }

def setType(current):
  global tipo
  tipo = current

def addDimention(dim):
  global dimension
  dimension = dimension + 1

def ResetId(token):
  global dimension
  dimension = 0

def ResetTablaVar(token):
  global TablaVariables
  TablaVariables = {}

def CreateFunction(token):
  global nombreFuncion
  nombreFuncion = token[0]
  TablaFunciones[token[0]] = {
      'tipo': tipo,
      'variables': ''
  }


def AsignaVariables():
  TablaFunciones[nombreFuncion]['variables'] = TablaVariables

#Predefinir los terminos que se usan en recursion
Variables_1 = Forward()
Variables_2 = Forward()
Expresiones = Forward()
Logicos = Forward()
Aritmeticos = Forward()
Factores = Forward()
Especiales = Forward()
Lista = Forward()
Funciones = Forward()
Estatuto = Forward()
Expresiones = Forward()
Escritura_1 = Forward()
Escritura_2 = Forward()
Decision_1 = Forward()

#Definiciones Simples de Palabras claves
Escribe = Regex(r"escribe")
Lee = Regex(r"lee")
Regresa = Regex(r"regresa")
Si = Regex(r"si")
Desde = Regex(r"desde")
Mientras = Regex(r"mientras")
Hasta = Regex(r"hasta")
Hacer = Regex(r"hacer")
Id = Word(alphas)
IdProg = Word(alphas)
IdFunciones = Word(alphas)
Tipo = Keyword('int') ^ Keyword('float') ^ Keyword('char')
Tipo_Retorno = Tipo ^ Keyword('void')
Num = Word(nums)
Var_Int = Regex(r'[0-9]+')
Var_Float = Regex(r'[0-9]+(.[0-9]+)*')
Var_Char = Regex(r"'[a-zA-z]'")
String = Regex(r"\"[ -~]*\"")

#Definicion de Tokens

#VAR_CTE
Var_CTE = Var_Float | Var_Int | Var_Char 

#IDENTIFICADORES
Identificadores = Id + '[' + Num.setParseAction(lambda token: addDimention(token[0])) + ']' + '[' + Num + ']' | Id + '[' + Num + ']' | Id

#LISTA_IDS
Lista <<= ',' + Identificadores + Lista | Empty()
Lista_Ids = Identificadores.setParseAction(AgregarVariable) + Lista.setParseAction(ResetId)

#FUNCION_RETORNO
Funcion_Retorno = Id + '(' + Lista_Ids + ')' | Id + '(' + ')'

#TERMINOS
Terminos = '(' + Expresiones + ')' | Funcion_Retorno | Identificadores | Var_CTE

#ESPECIALES
Especiales_1 = Regex(r"[$ยก?]")
Especiales <<= Terminos + Especiales_1 | Terminos

#FACTORES
Factores_1 = Regex(r"[*/]")
Factores <<= Especiales + Factores_1 + Factores | Especiales

#ARITMETICOS
Aritmeticos_1 = Regex(r"[+-]")
Aritmeticos <<= Factores + Aritmeticos_1 + Aritmeticos | Factores

#LOGICOS
Logicos_1 = Regex(r"[<>]|==|!=")
Logicos <<= Aritmeticos + Logicos_1 + Logicos | Aritmeticos

#EXPRESION
Expresiones_1 = Regex(r"[&|]")
Expresiones <<= Logicos + Expresiones_1 + Expresiones | Logicos

#ASIGNACION
Asignacion = Identificadores + '=' + Expresiones + ';'

#RETORNO
Retorno = Regresa + '(' + Expresiones + ')' + ';'

#FUNCION_VOID
Funcion_Void = Id + '(' + Lista_Ids + ')' + ';' | Id + '(' + ')' + ';'

#LECTURA
Lectura = Lee + '(' + Lista_Ids + ')' + ';'

#ESCRITURA
Escritura_2 <<= ',' + Escritura_1 | Empty()
Escritura_1 <<= String + Escritura_2 | Expresiones + Escritura_2
Escritura = Escribe + '(' + Escritura_1 + ')' + ';'

#DECISION
Decision_1 <<= Keyword('sino') + '{' + Estatuto + '}' | Empty()
Decision = Si + '(' + Expresiones + ')' + Keyword('entonces') + '{' + Estatuto + '}' + Decision_1

#REPETICION
Repeticion_Cond = Mientras + '(' + Expresiones + ')' + Keyword('haz')  + '{' + Estatuto  + '}'  
Repeticion_No_Cond = Desde + Asignacion + Hasta + Expresiones + Hacer + '{' + Estatuto + '}'
Repeticion = Repeticion_Cond | Repeticion_No_Cond

#ESTATUTO
Estatuto_1 = Asignacion | Retorno | Lectura | Escritura | Decision | Repeticion | Funcion_Void 
Estatuto <<= Estatuto_1 + Estatuto | Empty() 

#PARAMETROS
Variables_2 = ',' + Tipo + ':' + Id + Variables_2 | Empty()
Parametros = Tipo + ':' + Id + Variables_2 | Empty()

#VARIABLES
Variables_1 <<= Tipo + ':' + Lista_Ids + ';' + Variables_1 | Empty()
Variables = Keyword('var') + Tipo.setParseAction(lambda token: setType(locate(token[0]) )) + ':' + Lista_Ids + ';' + Variables_1 | Empty()

Funciones <<= Keyword('funcion').setParseAction(ResetTablaVar) + Tipo_Retorno + IdFunciones.setParseAction(CreateFunction) + '(' + Parametros + ')' + ';' + Variables.setParseAction(AsignaVariables) + '{' + Estatuto + '}' + Funciones | Empty()

#PROGRAMA
Programa = Keyword('Programa') + IdProg.setParseAction(CreateFunction) + ';' + Variables.setParseAction(AsignaVariables) + Funciones + Keyword('principal') + '(' + ')' + '{' + Estatuto + '}'

#Lee el archivo
print("Ingrese el nombre del archivo a leer")
fileName = input()
with open(fileName, 'r') as file:
  data = file.read().replace('\n', '')

#Pruebalo con la gramatica
try:
  Programa.parseString(data)
  print("Se compilo exitosamente")
except pyparsing.ParseException as pe:
  print(pe.explain(pe))

print(TablaFunciones)